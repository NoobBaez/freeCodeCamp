{
  "{\"sourceRoot\":\"/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver/routes/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver\",\"filename\":\"/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver/routes/api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver/routes/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver",
      "filename": "/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver/routes/api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver/routes/api.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver/routes/api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver/routes/",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "/*\n*\n*\n*       Complete the API routing below\n*\n*\n*/\n'use strict';\n\nvar SudokuSolver = require('../controllers/sudoku-solver.js');\n\nmodule.exports = function (app) {\n  var solver = new SudokuSolver();\n  app.route('/api/check').post(function (req, res) {\n    var body = req.body;\n    var coordinate = body.coordinate && body.coordinate.split(/(?<=[a-i])(?=\\d)/i);\n    var parseToInt = {\n      'a': 0,\n      'b': 1,\n      'c': 2,\n      'd': 3,\n      'e': 4,\n      'f': 5,\n      'g': 6,\n      'h': 7,\n      'i': 8\n    };\n    var inputValidation = checkValidation(body.puzzle, coordinate, body.value);\n    if (inputValidation) return res.json(inputValidation);\n    var puzzle = body.puzzle;\n    var row = coordinate[1];\n    var column = parseToInt[coordinate[0].toLowerCase()];\n    var value = body.value;\n    var rowCheck = solver.checkRowPlacement(puzzle, row, column, value);\n    var columnCheck = solver.checkColPlacement(puzzle, row, column, value);\n    var regionCheck = solver.checkRegionPlacement(puzzle, row, column, value);\n    var result = {\n      valid: true\n    };\n\n    if (!rowCheck || !columnCheck || !regionCheck) {\n      result.conflict = [];\n      if (!rowCheck) result.conflict.push('row');\n      if (!columnCheck) result.conflict.push('column');\n      if (!regionCheck) result.conflict.push('region');\n      result.valid = false;\n    }\n\n    ;\n    res.json(result);\n  });\n  app.route('/api/solve').post(function (req, res) {\n    var validation = solver.validate(req.body.puzzle);\n\n    if (validation && validation.error) {\n      res.json(validation);\n    } else {\n      var solution = solver.solve(req.body.puzzle);\n\n      if (solution) {\n        res.json({\n          solution: solution\n        });\n      } else {\n        res.json({\n          error: 'Puzzle cannot be solved'\n        });\n      }\n\n      ;\n    }\n\n    ;\n  });\n\n  function checkValidation(puzzle, coordinate, value) {\n    if (!puzzle || !coordinate || !value) {\n      //if the object submitted is missing puzzle, coordinate or value\n      return {\n        error: 'Required field(s) missing'\n      };\n    } else if (/[^\\.\\d]/.test(puzzle)) {\n      //if the puzzle submitted contains values which are not numbers or periods\n      return {\n        error: 'Invalid characters in puzzle'\n      };\n    } else if (puzzle.length !== 81) {\n      //if the puzzle submitted is greater or less than 81 characters\n      return {\n        error: 'Expected puzzle to be 81 characters long'\n      };\n    } else if (/[^a-i]/i.test(coordinate[0]) || /\\D/.test(coordinate[1])) {\n      //if the coordinate submitted does not point to an existing grid cell\n      return {\n        error: 'Invalid coordinate'\n      };\n    } else if (/\\D/.test(value)) {\n      //if the value submitted to /api/check is not a number between 1 and 9\n      return {\n        error: 'Invalid value'\n      };\n    } else {\n      return null;\n    }\n  }\n\n  ;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "body",
        "coordinate",
        "split",
        "parseToInt",
        "inputValidation",
        "checkValidation",
        "puzzle",
        "value",
        "json",
        "row",
        "column",
        "toLowerCase",
        "rowCheck",
        "checkRowPlacement",
        "columnCheck",
        "checkColPlacement",
        "regionCheck",
        "checkRegionPlacement",
        "result",
        "valid",
        "conflict",
        "push",
        "validation",
        "validate",
        "error",
        "solution",
        "solve",
        "test",
        "length"
      ],
      "mappings": "AAAA;;;;;;;AAQA;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,iCAAD,CAA5B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAe;AAE9B,MAAIC,MAAM,GAAG,IAAIL,YAAJ,EAAb;AAEAI,EAAAA,GAAG,CAACE,KAAJ,CAAU,YAAV,EACGC,IADH,CACQ,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClB,QAAMC,IAAI,GAAGF,GAAG,CAACE,IAAjB;AACA,QAAMC,UAAU,GAAGD,IAAI,CAACC,UAAL,IAAmBD,IAAI,CAACC,UAAL,CAAgBC,KAAhB,CAAsB,mBAAtB,CAAtC;AACA,QAAMC,UAAU,GAAG;AAAE,WAAK,CAAP;AAAU,WAAK,CAAf;AAAkB,WAAK,CAAvB;AAA0B,WAAK,CAA/B;AAAkC,WAAK,CAAvC;AAA0C,WAAK,CAA/C;AAAkD,WAAK,CAAvD;AAA0D,WAAK,CAA/D;AAAkE,WAAK;AAAvE,KAAnB;AAEA,QAAMC,eAAe,GAAGC,eAAe,CAACL,IAAI,CAACM,MAAN,EAAcL,UAAd,EAA0BD,IAAI,CAACO,KAA/B,CAAvC;AACA,QAAIH,eAAJ,EAAqB,OAAOL,GAAG,CAACS,IAAJ,CAASJ,eAAT,CAAP;AAErB,QAAME,MAAM,GAAGN,IAAI,CAACM,MAApB;AACA,QAAMG,GAAG,GAAGR,UAAU,CAAC,CAAD,CAAtB;AACA,QAAMS,MAAM,GAAGP,UAAU,CAACF,UAAU,CAAC,CAAD,CAAV,CAAcU,WAAd,EAAD,CAAzB;AACA,QAAMJ,KAAK,GAAGP,IAAI,CAACO,KAAnB;AAEA,QAAMK,QAAQ,GAAGjB,MAAM,CAACkB,iBAAP,CAAyBP,MAAzB,EAAiCG,GAAjC,EAAsCC,MAAtC,EAA8CH,KAA9C,CAAjB;AACA,QAAMO,WAAW,GAAGnB,MAAM,CAACoB,iBAAP,CAAyBT,MAAzB,EAAiCG,GAAjC,EAAsCC,MAAtC,EAA8CH,KAA9C,CAApB;AACA,QAAMS,WAAW,GAAGrB,MAAM,CAACsB,oBAAP,CAA4BX,MAA5B,EAAoCG,GAApC,EAAyCC,MAAzC,EAAiDH,KAAjD,CAApB;AAEA,QAAIW,MAAM,GAAG;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAb;;AACA,QAAI,CAACP,QAAD,IAAa,CAACE,WAAd,IAA6B,CAACE,WAAlC,EAA+C;AAC7CE,MAAAA,MAAM,CAACE,QAAP,GAAkB,EAAlB;AACA,UAAI,CAACR,QAAL,EAAeM,MAAM,CAACE,QAAP,CAAgBC,IAAhB,CAAqB,KAArB;AACf,UAAI,CAACP,WAAL,EAAkBI,MAAM,CAACE,QAAP,CAAgBC,IAAhB,CAAqB,QAArB;AAClB,UAAI,CAACL,WAAL,EAAkBE,MAAM,CAACE,QAAP,CAAgBC,IAAhB,CAAqB,QAArB;AAClBH,MAAAA,MAAM,CAACC,KAAP,GAAe,KAAf;AACD;;AAAA;AACDpB,IAAAA,GAAG,CAACS,IAAJ,CAASU,MAAT;AACD,GA3BH;AA6BAxB,EAAAA,GAAG,CAACE,KAAJ,CAAU,YAAV,EACGC,IADH,CACQ,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClB,QAAIuB,UAAU,GAAG3B,MAAM,CAAC4B,QAAP,CAAgBzB,GAAG,CAACE,IAAJ,CAASM,MAAzB,CAAjB;;AACA,QAAIgB,UAAU,IAAIA,UAAU,CAACE,KAA7B,EAAoC;AAClCzB,MAAAA,GAAG,CAACS,IAAJ,CAASc,UAAT;AACD,KAFD,MAEO;AACL,UAAIG,QAAQ,GAAG9B,MAAM,CAAC+B,KAAP,CAAa5B,GAAG,CAACE,IAAJ,CAASM,MAAtB,CAAf;;AACA,UAAImB,QAAJ,EAAc;AACZ1B,QAAAA,GAAG,CAACS,IAAJ,CAAS;AAAEiB,UAAAA,QAAQ,EAARA;AAAF,SAAT;AACD,OAFD,MAEO;AACL1B,QAAAA,GAAG,CAACS,IAAJ,CAAS;AAAEgB,UAAAA,KAAK,EAAE;AAAT,SAAT;AACD;;AAAA;AACF;;AAAA;AACF,GAbH;;AAeA,WAASnB,eAAT,CAAyBC,MAAzB,EAAiCL,UAAjC,EAA6CM,KAA7C,EAAoD;AAElD,QAAI,CAACD,MAAD,IAAW,CAACL,UAAZ,IAA0B,CAACM,KAA/B,EAAsC;AACpC;AACA,aAAO;AAAEiB,QAAAA,KAAK,EAAE;AAAT,OAAP;AACD,KAHD,MAGO,IAAI,UAAUG,IAAV,CAAerB,MAAf,CAAJ,EAA4B;AACjC;AACA,aAAO;AAAEkB,QAAAA,KAAK,EAAE;AAAT,OAAP;AACD,KAHM,MAGA,IAAIlB,MAAM,CAACsB,MAAP,KAAkB,EAAtB,EAA0B;AAC/B;AACA,aAAO;AAAEJ,QAAAA,KAAK,EAAE;AAAT,OAAP;AACD,KAHM,MAGA,IAAI,UAAUG,IAAV,CAAe1B,UAAU,CAAC,CAAD,CAAzB,KAAiC,KAAK0B,IAAL,CAAU1B,UAAU,CAAC,CAAD,CAApB,CAArC,EAA+D;AACpE;AACA,aAAO;AAAEuB,QAAAA,KAAK,EAAE;AAAT,OAAP;AACD,KAHM,MAGA,IAAI,KAAKG,IAAL,CAAUpB,KAAV,CAAJ,EAAsB;AAC3B;AACA,aAAO;AAAEiB,QAAAA,KAAK,EAAE;AAAT,OAAP;AACD,KAHM,MAGA;AACL,aAAO,IAAP;AACD;AACF;;AAAA;AACF,CArED",
      "sourceRoot": "/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver/routes/",
      "sourcesContent": [
        "/*\n*\n*\n*       Complete the API routing below\n*\n*\n*/\n\n'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\nmodule.exports = function (app) {\n\n  let solver = new SudokuSolver();\n\n  app.route('/api/check')\n    .post((req, res) => {\n      const body = req.body;\n      const coordinate = body.coordinate && body.coordinate.split(/(?<=[a-i])(?=\\d)/i);\n      const parseToInt = { 'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8 };\n\n      const inputValidation = checkValidation(body.puzzle, coordinate, body.value);\n      if (inputValidation) return res.json(inputValidation);\n\n      const puzzle = body.puzzle;\n      const row = coordinate[1];\n      const column = parseToInt[coordinate[0].toLowerCase()];\n      const value = body.value;\n\n      const rowCheck = solver.checkRowPlacement(puzzle, row, column, value);\n      const columnCheck = solver.checkColPlacement(puzzle, row, column, value);\n      const regionCheck = solver.checkRegionPlacement(puzzle, row, column, value);\n\n      let result = { valid: true }\n      if (!rowCheck || !columnCheck || !regionCheck) {\n        result.conflict = [];\n        if (!rowCheck) result.conflict.push('row');\n        if (!columnCheck) result.conflict.push('column');\n        if (!regionCheck) result.conflict.push('region');\n        result.valid = false;\n      };\n      res.json(result);\n    });\n\n  app.route('/api/solve')\n    .post((req, res) => {\n      let validation = solver.validate(req.body.puzzle);\n      if (validation && validation.error) {\n        res.json(validation);\n      } else {\n        let solution = solver.solve(req.body.puzzle);\n        if (solution) {\n          res.json({ solution });\n        } else {\n          res.json({ error: 'Puzzle cannot be solved' });\n        };\n      };\n    });\n\n  function checkValidation(puzzle, coordinate, value) {\n\n    if (!puzzle || !coordinate || !value) {\n      //if the object submitted is missing puzzle, coordinate or value\n      return { error: 'Required field(s) missing' };\n    } else if (/[^\\.\\d]/.test(puzzle)) {\n      //if the puzzle submitted contains values which are not numbers or periods\n      return { error: 'Invalid characters in puzzle' };\n    } else if (puzzle.length !== 81) {\n      //if the puzzle submitted is greater or less than 81 characters\n      return { error: 'Expected puzzle to be 81 characters long' };\n    } else if (/[^a-i]/i.test(coordinate[0]) || /\\D/.test(coordinate[1])) {\n      //if the coordinate submitted does not point to an existing grid cell\n      return { error: 'Invalid coordinate' }\n    } else if (/\\D/.test(value)) {\n      //if the value submitted to /api/check is not a number between 1 and 9\n      return { error: 'Invalid value' };\n    } else {\n      return null;\n    }\n  };\n};\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1605142534013
  },
  "{\"sourceRoot\":\"/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver/controllers/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver\",\"filename\":\"/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver/controllers/sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver/controllers/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver",
      "filename": "/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver/controllers/sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver/controllers/sudoku-solver.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver/controllers/sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver/controllers/",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar SudokuSolver = /*#__PURE__*/function () {\n  function SudokuSolver() {\n    _classCallCheck(this, SudokuSolver);\n  }\n\n  _createClass(SudokuSolver, [{\n    key: \"validate\",\n    value: function validate(puzzleString) {\n      if (!puzzleString) {\n        return {\n          error: 'Required field missing'\n        };\n      } else if (/[^\\.\\d]/.test(puzzleString)) {\n        return {\n          error: 'Invalid characters in puzzle'\n        };\n      } else if (puzzleString.length !== 81) {\n        return {\n          error: 'Expected puzzle to be 81 characters long'\n        };\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"checkRowPlacement\",\n    value: function checkRowPlacement(puzzleString, row, column, value) {\n      var grid = this.createGrid(puzzleString);\n      if (grid[row - 1][column] === value) return true;\n      var rowValues = puzzleString.slice(9 * (row - 1), 9 * row).replace(/\\./g, \"\"); //return TRUE if it is not present at the row, FALSE otherwise\n\n      return !rowValues.includes(value);\n    }\n  }, {\n    key: \"checkColPlacement\",\n    value: function checkColPlacement(puzzleString, row, column, value) {\n      var grid = this.createGrid(puzzleString);\n      if (grid[row - 1][column] === value) return true;\n      var colValues = puzzleString.split(\"\").reduce(function (arr, ele, index) {\n        if (index % 9 === 0) {\n          if (/\\d/.test(puzzleString[index + column])) {\n            return arr.concat(puzzleString[index + column]);\n          }\n\n          ;\n        }\n\n        ;\n        return arr;\n      }, []).join(''); //return TRUE if it is not include at the col, FALSE otherwise\n\n      return !colValues.includes(value);\n    }\n  }, {\n    key: \"checkRegionPlacement\",\n    value: function checkRegionPlacement(puzzleString, row, column, value) {\n      var _grid = this.createGrid(puzzleString);\n\n      if (_grid[row - 1][column] === value) return true;\n      var grid = this.createGrid(puzzleString);\n      var x = Math.floor(column / 3) * 3;\n      var y = Math.floor((row - 1) / 3) * 3;\n\n      for (var i = 0; i < 3; i++) {\n        for (var t = 0; t < 3; t++) {\n          if (grid[y + i][x + t] === value.toString()) return false;\n        }\n\n        ;\n      }\n\n      ;\n      return true;\n    }\n  }, {\n    key: \"solve\",\n    value: function solve(puzzleArray) {\n      var puzzleString = puzzleArray[puzzleArray.length - 1];\n      var grid = this.createGrid(puzzleString);\n\n      for (var row = 1; row < 10; row++) {\n        for (var col = 0; col < 9; col++) {\n          if (grid[row - 1][col] === '.') {\n            for (var value = 1; value < 10; value++) {\n              value = value.toString(); //check that the VALUE is valid the COLUMN, ROW and REGION (3x3 grid)\n\n              var checkCol = this.checkColPlacement(puzzleString, row, col, value);\n              var checkRow = this.checkRowPlacement(puzzleString, row, col, value);\n              var checkRegion = this.checkRegionPlacement(puzzleString, row, col, value);\n\n              if (checkCol && checkRow && checkRegion) {\n                //add the value (number) to the grid and parse it\n                grid[row - 1][col] = value;\n                var newPuzzleString = grid.flat().join(\"\"); //if the return value for the next recursion is a GRID you got a solution \n                //other wise it is NULL and have to reset the coordinate to a dot (.) and \n                //try with a different value\n\n                var isSolution = this.solve(puzzleArray.concat(newPuzzleString));\n                if (isSolution) return isSolution;\n                grid[row - 1][col] = '.';\n              }\n\n              ;\n            }\n\n            ;\n            return null;\n          }\n\n          ;\n        }\n\n        ;\n      }\n\n      ;\n      return puzzleArray.concat(grid.flat().join(\"\"));\n    }\n  }, {\n    key: \"createGrid\",\n    value: function createGrid(puzzleString) {\n      var grid = [];\n      var arrContainer = []; //create a 9x9 grid\n\n      puzzleString.split(\"\").forEach(function (ele) {\n        if (arrContainer.length < 9) arrContainer.push(ele);\n\n        if (arrContainer.length === 9) {\n          grid.push(arrContainer);\n          arrContainer = [];\n        }\n\n        ;\n      });\n      return grid;\n    }\n  }]);\n\n  return SudokuSolver;\n}();\n\n;\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "SudokuSolver",
        "puzzleString",
        "error",
        "test",
        "length",
        "row",
        "column",
        "value",
        "grid",
        "createGrid",
        "rowValues",
        "slice",
        "replace",
        "includes",
        "colValues",
        "split",
        "reduce",
        "arr",
        "ele",
        "index",
        "concat",
        "join",
        "_grid",
        "x",
        "Math",
        "floor",
        "y",
        "i",
        "t",
        "toString",
        "puzzleArray",
        "col",
        "checkCol",
        "checkColPlacement",
        "checkRow",
        "checkRowPlacement",
        "checkRegion",
        "checkRegionPlacement",
        "newPuzzleString",
        "flat",
        "isSolution",
        "solve",
        "arrContainer",
        "forEach",
        "push",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/haniel/learn/freecodecamp/qualityAssurance/sudoku-solver/controllers/",
      "sourcesContent": [
        "class SudokuSolver {\n\n  validate(puzzleString) {\n    if (!puzzleString) {\n      return { error: 'Required field missing' };\n    } else if (/[^\\.\\d]/.test(puzzleString)) {\n      return { error: 'Invalid characters in puzzle' };\n    } else if (puzzleString.length !== 81) {\n      return { error: 'Expected puzzle to be 81 characters long' }\n    } else {\n      return null;\n    }\n  };\n\n  checkRowPlacement(puzzleString, row, column, value) {\n    let grid = this.createGrid(puzzleString);\n    if (grid[row - 1][column] === value) return true;\n    let rowValues = puzzleString.slice(9 * (row - 1), 9 * row).replace(/\\./g, \"\");\n    //return TRUE if it is not present at the row, FALSE otherwise\n    return !rowValues.includes(value);\n  };\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let grid = this.createGrid(puzzleString);\n    if (grid[row - 1][column] === value) return true;\n\n    let colValues = puzzleString.split(\"\").reduce((arr, ele, index) => {\n      if (index % 9 === 0) {\n        if (/\\d/.test(puzzleString[index + column])) {\n          return arr.concat(puzzleString[index + column]);\n        };\n      };\n      return arr;\n    }, []).join('');\n    //return TRUE if it is not include at the col, FALSE otherwise\n    return !colValues.includes(value)\n  };\n\n  checkRegionPlacement(puzzleString, row, column, value) {\n    let _grid = this.createGrid(puzzleString);\n    if (_grid[row - 1][column] === value) return true;\n\n    let grid = this.createGrid(puzzleString);\n    let x = Math.floor(column / 3) * 3;\n    let y = Math.floor((row - 1) / 3) * 3;\n\n    for (let i = 0; i < 3; i++) {\n      for (let t = 0; t < 3; t++) {\n        if (grid[y + i][x + t] === value.toString()) return false;\n      };\n    };\n    return true;\n  };\n\n  solve(puzzleArray) {\n    const puzzleString = puzzleArray[puzzleArray.length - 1];\n    let grid = this.createGrid(puzzleString);\n\n    for (let row = 1; row < 10; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (grid[row - 1][col] === '.') {\n          for (let value = 1; value < 10; value++) {\n            value = value.toString();\n\n            //check that the VALUE is valid the COLUMN, ROW and REGION (3x3 grid)\n            let checkCol = this.checkColPlacement(puzzleString, row, col, value);\n            let checkRow = this.checkRowPlacement(puzzleString, row, col, value);\n            let checkRegion = this.checkRegionPlacement(puzzleString, row, col, value);\n\n            if (checkCol && checkRow && checkRegion) {\n              //add the value (number) to the grid and parse it\n              grid[row - 1][col] = value;\n              let newPuzzleString = grid.flat().join(\"\");\n              //if the return value for the next recursion is a GRID you got a solution \n              //other wise it is NULL and have to reset the coordinate to a dot (.) and \n              //try with a different value\n              let isSolution = this.solve(puzzleArray.concat(newPuzzleString));\n              if (isSolution) return isSolution;\n              grid[row - 1][col] = '.';\n            };\n          };\n          return null;\n        };\n      };\n    };\n    return puzzleArray.concat(grid.flat().join(\"\"));\n  };\n\n  createGrid(puzzleString) {\n    let grid = [];\n    let arrContainer = [];\n\n    //create a 9x9 grid\n    puzzleString.split(\"\").forEach((ele) => {\n      if (arrContainer.length < 9) arrContainer.push(ele);\n      if (arrContainer.length === 9) {\n        grid.push(arrContainer);\n        arrContainer = [];\n      };\n    });\n    return grid;\n  };\n};\n\nmodule.exports = SudokuSolver;\n\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1605211806358
  }
}